Some things in supermarkets have simple prices: this can of beans costs $0.65.
Other things have more complex prices. For example:

* three for a dollar (so what’s the price if I buy 4, or 5?)
* $1.99/pound (so what does 4 ounces cost?)
* buy two, get one free (so does the third item have a price?)

The exercise is to experiment with various models for representing money and prices
that are flexible enough to deal with these (and other) pricing schemes, and at the
same time are generally usable (at the checkout, for stock management, order entry,
and so on). Spend time considering issues such as:

* does fractional money exist?
* when (if ever) does rounding take place?
* are costs and prices the same class of thing?
* if a shelf of 100 cans is priced using “buy two, get one free”, how do you value
  the stock?

Requirements
* Create products with a price. products can have a price per unit or per weight
  measure (ounces, kg, etc)
* Create offers for those products
    ° Buy A get B
    ° X units for Y $

* Add products to a shopping cart
* Calculate the total of the shopping cart

Test

Create:

* A class diagram that includes:
    ° class names
    ° method names and its accessibility (public / protected / private)
    ° class and instance properties and their accessibility (public / protected
      / private)
* Pseudo code that solves the problem or sequence diagram that shows how objects
  interact with each other
* The relational data model that would store this data
